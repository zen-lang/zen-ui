{ns demo
 import #{zenbox zen-ui fhir storage}

 server
 {:zen/tags #{zenbox/server}
  :port 4445
  :services #{storage/db}
  :after-start [ensure-stores]
  :apis #{api}}

 index-op
 {:zen/tags #{zenbox/op}
  :operation zenbox/response
  :response {:status 302 :headers {"location" "static/index.html"}}}

 ensure-stores
 {:zen/tags #{zenbox/rpc}
  :operation zenbox/ensure-stores
  :dbs #{storage/db}}

 sql-op
 {:zen/tags #{zenbox/rpc}
  :operation zenbox/sql
  :db storage/db}

 create-user
 {:zen/tags #{zenbox/rpc}
  :operation storage/insert
  :storage storage/user-store
  :schemas #{new-user}}

 read-user
 {:zen/tags #{zenbox/rpc}
  :operation storage/read
  :storage storage/user-store}

 search-user
 {:zen/tags #{zenbox/rpc}
  :operation storage/search
  :storage storage/user-store
  :params {:name {:template "resource->>'name' ilike {{param}}"}}}

 ;; instance of zenbox/json-rpc
 json-rpc-op
 {:zen/tags #{zenbox/op}
  ;; configuration
  :operation zenbox/json-rpc}

 insert-patient
 {:zen/tags #{zenbox/rpc}
  :storage storage/patient-store
  :operation storage/insert
  }

 read-patient
 {:zen/tags #{zenbox/rpc}
  :storage storage/patient-store
  :operation storage/read}

 delete-patient
 {:zen/tags #{zenbox/rpc}
  :storage storage/patient-store
  :operation storage/delete}
 create-pgstore

 {:zen/tags #{zenbox/rpc}
  :storage storage/postgres-config-store
  :operation storage/insert}

 dashboard
 {:zen/tags #{zenbox/rpc}}

 all-tags
 {:zen/tags #{zenbox/rpc}}

 api
 {:zen/tags #{zenbox/api}
  :GET {:operation index-op}
  "json-rpc" {:POST {:operation json-rpc-op}}
  "zen" {:apis #{zen-api}}}

 zen-api
 {:zen/tags #{zenbox/api}
  "symbols" {:GET {:operation get-symbols}
             [:ns] {[:name] {:GET {:operation get-symbol}}}}
  "tags"    {:GET {:operation get-tags}}}

 get-all-symbols
 {:zen/tags #{zenbox/rpc}
  :zen/desc "Get all tags"
  :params {:type zen/map}}

 zen-validate
 {:zen/tags #{zenbox/rpc}
  :zen/desc ""
  :params {:type zen/map
           :keys {:schema {:type zen/symbol}
                  :data   {:type zen/any}}}}

 }
